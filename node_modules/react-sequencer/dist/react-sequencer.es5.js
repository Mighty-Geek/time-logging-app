import React__default, { createElement, Component } from 'react';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
}

var PlayStatus;
(function (PlayStatus) {
    PlayStatus["IDLE"] = "STATUS_IDLE";
    PlayStatus["PLAYING"] = "STATUS_PLAYING";
})(PlayStatus || (PlayStatus = {}));

var onNextTick;
var cancelNextTick;
if (typeof window !== 'undefined' &&
    typeof window.requestAnimationFrame === 'function') {
    onNextTick = window.requestAnimationFrame;
    cancelNextTick = window.cancelAnimationFrame;
}
else if (typeof setTimeout === 'function') {
    onNextTick = function (func) { return setTimeout(func, 15); };
    cancelNextTick = clearTimeout;
}
else {
    throw new Error('React sequencer depends on requestAnimationFrame, please use a polyfill if not available in the browser.');
}
var Ticker = /** @class */ (function () {
    function Ticker() {
        var _this = this;
        this.startLoop = function () {
            if (!_this.isActive) {
                _this.isActive = true;
                _this.currentTimeStamp = Date.now();
                _this.requestID = onNextTick(_this._onLoop);
            }
        };
        this.stopLoop = function () {
            if (_this.isActive) {
                _this.isActive = false;
                cancelNextTick(_this.requestID);
            }
        };
        this._onLoop = function () {
            _this.currentTimeStamp = Date.now();
            for (var i = 0; i < _this.subscriptions.length; i++) {
                var fn = _this.subscriptions[i];
                fn(_this.currentTimeStamp);
            }
            if (_this.isActive) {
                _this.requestID = onNextTick(_this._onLoop);
            }
        };
        this.currentTimeStamp = Date.now();
        this.isActive = false;
        this.requestID = null;
        this.subscriptions = [];
    }
    Ticker.prototype.onTick = function (fn) {
        if (this.subscriptions.length === 0) {
            this.startLoop();
        }
        this.subscriptions.push(fn);
    };
    Ticker.prototype.offTick = function (fn) {
        var index = this.subscriptions.indexOf(fn);
        if (index !== -1) {
            this.subscriptions.splice(index, 1);
        }
        if (this.subscriptions.length === 0) {
            this.stopLoop();
        }
    };
    return Ticker;
}());

var ticker = new Ticker();
var Sequencer = /** @class */ (function () {
    function Sequencer(props) {
        var _this = this;
        this.onLoop = function (now) {
            if (_this.status !== PlayStatus.PLAYING) {
                return;
            }
            _this.currentTimeIn = now - _this.startedAt;
            var currentStep = _this.getCurrentStep();
            var completesAt = currentStep.endPos;
            if (_this.currentTimeIn >= completesAt) {
                if (_this.currentStepIndex === _this.steps.length - 1) {
                    if (_this.endMode === 'start') {
                        _this.stop();
                        return;
                    }
                    if (_this.endMode === 'end') {
                        _this.complete();
                        return;
                    }
                    if (_this.endMode === 'loop') {
                        _this.startedAt = now;
                        _this.goToStepByIndex(0);
                    }
                }
                else {
                    _this.currentStepIndex++;
                    _this.notifyChange();
                }
            }
        };
        this.onChange = function (fn) {
            _this.subscriptions.push(fn);
        };
        this.play = function () {
            if (_this.status === PlayStatus.PLAYING) {
                return;
            }
            if (_this.isComplete()) {
                _this.goToStepByIndex(0);
            }
            _this.status = PlayStatus.PLAYING;
            ticker.onTick(_this.onLoop);
            _this.startedAt = ticker.currentTimeStamp - _this.currentTimeIn;
            _this.notifyChange();
        };
        this.pause = function () {
            if (_this.status === PlayStatus.PLAYING) {
                _this.status = PlayStatus.IDLE;
                ticker.offTick(_this.onLoop);
                _this.notifyChange();
            }
        };
        this.stop = function () {
            _this.goToStepByIndex(0);
            _this.status = PlayStatus.IDLE;
            ticker.offTick(_this.onLoop);
            _this.notifyChange();
        };
        this.complete = function () {
            _this.currentStepIndex = _this.steps.length - 1;
            _this.currentTimeIn = _this.totalDuration;
            _this.status = PlayStatus.IDLE;
            ticker.offTick(_this.onLoop);
            _this.notifyChange();
        };
        this.isComplete = function () {
            return _this.currentTimeIn >= _this.totalDuration;
        };
        this.isPlaying = function () {
            return _this.status === PlayStatus.PLAYING;
        };
        this.isBefore = function (stepName) {
            var stepIndex = _this.steps.findIndex(function (step) { return step.name === stepName; });
            if (stepIndex === -1) {
                throw new Error("Sequencer step " + stepName + " not found.");
            }
            return _this.currentStepIndex < stepIndex;
        };
        this.isAfter = function (stepName) {
            var stepIndex = _this.steps.findIndex(function (step) { return step.name === stepName; });
            if (stepIndex === -1) {
                throw new Error("Sequencer step " + stepName + " not found.");
            }
            return _this.currentStepIndex > stepIndex;
        };
        this.getState = function () {
            var state = {
                current: _this.steps[_this.currentStepIndex].name,
                index: _this.currentStepIndex,
                isPlaying: _this.isPlaying(),
                isComplete: _this.isComplete()
            };
            return state;
        };
        var defaults = {
            steps: [],
            loop: false,
            complete: false,
            endMode: 'end'
        };
        var options = Object.assign({}, defaults, props);
        this.steps = this.generateSteps(options.steps);
        this.totalDuration = this.steps[this.steps.length - 1].endPos;
        this.currentStepIndex = 0;
        this.currentTimeIn = 0;
        this.startedAt = 0;
        this.endMode = options.loop ? 'loop' : options.endMode;
        this.status = PlayStatus.IDLE;
        this.requestID = null;
        this.subscriptions = [];
        if (options.complete === true) {
            this.complete();
        }
    }
    Sequencer.prototype.generateSteps = function (stepsInput) {
        if (!stepsInput) {
            throw new Error('Invalid format.');
        }
        var prev = 0;
        var steps = stepsInput.map(function (step) {
            if (!Array.isArray(step) || step.length !== 2) {
                throw new Error('Invalid format. See docs for correct structure.');
            }
            var startPos = prev;
            var endPos = step[1] + prev;
            prev = endPos;
            return {
                startPos: startPos,
                endPos: endPos,
                name: step[0]
            };
        });
        return steps;
    };
    Sequencer.prototype.notifyChange = function () {
        var state = this.getState();
        this.subscriptions.forEach(function (fn) {
            fn(state);
        });
    };
    Sequencer.prototype.goToStepByIndex = function (index) {
        this.currentStepIndex = index;
        this.currentTimeIn = this.steps[index].startPos;
    };
    Sequencer.prototype.getCurrentStep = function () {
        return this.steps[this.currentStepIndex];
    };
    return Sequencer;
}());

var defaultOptions = {
    steps: [],
    loop: false,
    endMode: 'end',
    complete: false
};
var withSequencer = function (options) {
    return function (Component$1) {
        var _a;
        return _a = /** @class */ (function (_super) {
                __extends(SequencerWrapper, _super);
                function SequencerWrapper(props) {
                    var _this = _super.call(this, props) || this;
                    _this.handleChange = function (sequencerState) {
                        var sequencer = Object.assign(sequencerState, _this.getApi());
                        _this.setState({
                            sequencer: sequencer
                        });
                    };
                    var steps = props.steps, loop = props.loop, complete = props.complete, endMode = props.endMode;
                    _this.sequencer = new Sequencer({ steps: steps, loop: loop, complete: complete, endMode: endMode });
                    var sequencerState = _this.sequencer.getState();
                    var sequencerApi = _this.getApi();
                    _this.state = {
                        sequencer: Object.assign(sequencerState, sequencerApi)
                    };
                    _this.sequencer.onChange(_this.handleChange);
                    return _this;
                }
                SequencerWrapper.prototype.componentWillReceiveProps = function (nextProps) {
                    var _a = this.props, shouldPlayOnUpdate = _a.shouldPlayOnUpdate, shouldStopOnUpdate = _a.shouldStopOnUpdate, shouldCompleteOnUpdate = _a.shouldCompleteOnUpdate;
                    if (shouldCompleteOnUpdate &&
                        shouldCompleteOnUpdate(this.props, nextProps)) {
                        this.sequencer.complete();
                    }
                    if (shouldStopOnUpdate && shouldStopOnUpdate(this.props, nextProps)) {
                        this.sequencer.stop();
                    }
                    if (shouldPlayOnUpdate && shouldPlayOnUpdate(this.props, nextProps)) {
                        this.sequencer.play();
                    }
                };
                SequencerWrapper.prototype.getApi = function () {
                    return {
                        play: this.sequencer.play,
                        stop: this.sequencer.stop,
                        pause: this.sequencer.pause,
                        complete: this.sequencer.complete,
                        isBefore: this.sequencer.isBefore,
                        isAfter: this.sequencer.isAfter
                    };
                };
                SequencerWrapper.prototype.render = function () {
                    var _a = this.props, steps = _a.steps, loop = _a.loop, complete = _a.complete, shouldPlayOnUpdate = _a.shouldPlayOnUpdate, shouldStopOnUpdate = _a.shouldStopOnUpdate, shouldCompleteOnUpdate = _a.shouldCompleteOnUpdate, props = __rest(_a, ["steps", "loop", "complete", "shouldPlayOnUpdate", "shouldStopOnUpdate", "shouldCompleteOnUpdate"]);
                    return createElement(Component$1, __assign({}, props, { sequencer: this.state.sequencer }));
                };
                return SequencerWrapper;
            }(Component)),
            _a.defaultProps = options
                ? Object.assign({}, defaultOptions, options)
                : defaultOptions,
            _a;
    };
};

var SequencerWrapper = function (_a) {
    var children = _a.children, sequencer = _a.sequencer;
    return children(sequencer);
};
var sequencerWrapper = withSequencer()(SequencerWrapper);

var Transition = /** @class */ (function (_super) {
    __extends(Transition, _super);
    function Transition(props) {
        var _this = _super.call(this, props) || this;
        _this.handleInSeqChange = function (seq) {
            _this.setState({
                current: seq.current,
                exitComplete: false
            });
        };
        _this.handleOutSeqChange = function (seq) {
            _this.setState({
                current: seq.current,
                exitComplete: seq.isComplete
            });
        };
        var current = null;
        _this.outSeq = props.outSteps
            ? new Sequencer({
                steps: props.outSteps
            })
            : null;
        _this.inSeq = new Sequencer({
            steps: props.inSteps
        });
        if (props.in && props.runOnMount) {
            _this.inSeq.stop();
            current = _this.inSeq.getState().current;
        }
        else if (!props.in) {
            if (_this.outSeq) {
                _this.outSeq.complete();
                current = _this.outSeq.getState().current;
            }
            else {
                _this.inSeq.stop();
                current = _this.inSeq.getState().current;
            }
        }
        else {
            _this.inSeq.complete();
            current = _this.inSeq.getState().current;
        }
        _this.state = {
            current: current,
            exitComplete: !props.in
        };
        _this.inSeq.onChange(_this.handleInSeqChange);
        if (_this.outSeq) {
            _this.outSeq.onChange(_this.handleOutSeqChange);
        }
        return _this;
    }
    Transition.prototype.componentDidMount = function () {
        if (this.props.in && this.props.runOnMount) {
            this.inSeq.play();
        }
    };
    Transition.prototype.componentWillUnmount = function () {
        this.inSeq.stop();
        if (this.outSeq) {
            this.outSeq.stop();
            this.outSeq = null;
        }
    };
    Transition.prototype.componentWillReceiveProps = function (nextProps) {
        if (this.props.in && !nextProps.in) {
            this.inSeq.stop();
            if (this.outSeq) {
                this.outSeq.play();
            }
        }
        else if (!this.props.in && nextProps.in) {
            if (this.outSeq) {
                this.outSeq.stop();
            }
            this.inSeq.play();
        }
    };
    Transition.prototype.render = function () {
        var _a = this.props, children = _a.children, unmountOnExit = _a.unmountOnExit;
        var show = this.props.in;
        var _b = this.state, current = _b.current, exitComplete = _b.exitComplete;
        if (unmountOnExit && show === false && exitComplete === true) {
            return null;
        }
        if (!children) {
            return null;
        }
        if (typeof children !== 'function') {
            throw new Error('Child passed into Transition must be a function');
        }
        return children(current);
    };
    Transition.defaultProps = {
        in: false,
        unmountOnExit: false,
        runOnMount: false,
        outSteps: null
    };
    return Transition;
}(React__default.PureComponent));

export { sequencerWrapper as SequencerWrapper, Transition, withSequencer };
//# sourceMappingURL=react-sequencer.es5.js.map
