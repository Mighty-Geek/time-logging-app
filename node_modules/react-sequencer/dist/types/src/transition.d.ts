import React from 'react';
import Sequencer from './sequencer';
import { StepsInput, SequencerState } from './types';
interface Props {
    /** Toggles the component in and out. */
    in: boolean;
    /** Sequence to perform when in becomes true. */
    inSteps: StepsInput;
    /** Sequence to perform when in becomes false. */
    outSteps: StepsInput;
    /** Whether or not to run the 'in' sequence when the component mounts. */
    unmountOnExit: boolean;
    /** If set to true, the child element is removed from the dom when
     * the out sequence gets to a completed state. Note that your
     * component will remain mounted for the duration of the last
     * step before unmounting. */
    runOnMount: boolean;
}
interface State {
    current: string;
    exitComplete: boolean;
}
declare class Transition extends React.PureComponent<Props, State> {
    inSeq: Sequencer;
    outSeq: Sequencer | null;
    static defaultProps: {
        in: boolean;
        unmountOnExit: boolean;
        runOnMount: boolean;
        outSteps: null;
    };
    constructor(props: Props);
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentWillReceiveProps(nextProps: Props): void;
    handleInSeqChange: (seq: SequencerState) => void;
    handleOutSeqChange: (seq: SequencerState) => void;
    render(): any;
}
export default Transition;
