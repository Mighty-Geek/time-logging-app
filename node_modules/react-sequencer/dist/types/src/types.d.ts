export declare enum PlayStatus {
    IDLE = "STATUS_IDLE",
    PLAYING = "STATUS_PLAYING"
}
export declare type EndMode = 'loop' | 'end' | 'start';
/**** Ticker */
export declare type TickerNotifyFunction = (timestamp: number) => void;
/**** Sequencer */
export declare type StepInput = [string, number];
export declare type StepsInput = Array<StepInput>;
export interface OptionsInput {
    steps: StepsInput;
    loop?: boolean;
    complete?: boolean;
    endMode?: EndMode;
}
export interface Options {
    steps: StepsInput;
    loop: boolean;
    complete: boolean;
    endMode: EndMode;
}
export interface Step {
    startPos: number;
    endPos: number;
    name: string;
}
export declare type Steps = Array<Step>;
export declare type NotifyFunction = (state: SequencerState) => void;
export declare type Subscriptions = Array<NotifyFunction>;
export interface SequencerState {
    current: string;
    index: number;
    isPlaying: boolean;
    isComplete: boolean;
}
/*** WithSequencer */
export interface WithSequencerProps extends OptionsInput {
    shouldPlayOnUpdate?: {
        (currProps: any, nextProps: any): boolean;
    };
    shouldStopOnUpdate?: {
        (currProps: any, nextProps: any): boolean;
    };
    shouldCompleteOnUpdate?: {
        (currProps: any, nextProps: any): boolean;
    };
}
export interface InjectedAPI {
    play(): void;
    complete(): void;
    stop(): void;
    pause(): void;
    isBefore(name: string): boolean;
    isAfter(name: string): boolean;
}
export interface InjectedProps {
    sequencer: InjectedAPI & SequencerState;
}
