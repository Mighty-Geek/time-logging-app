import React, { ReactElement } from 'react';
import { SequencerState, InjectedAPI, InjectedProps } from './types';
interface Props extends InjectedProps {
    children(sequencer: InjectedAPI & SequencerState): ReactElement;
}
declare const _default: {
    new (props: Pick<Props, "children"> & import("./types").WithSequencerProps): {
        sequencer: import("./sequencer").default;
        componentWillReceiveProps(nextProps: Pick<Props, "children"> & import("./types").WithSequencerProps): void;
        getApi(): InjectedAPI;
        handleChange: (sequencerState: SequencerState) => void;
        render(): JSX.Element;
        context: any;
        setState<K extends "sequencer">(state: InjectedProps | ((prevState: Readonly<InjectedProps>, props: Readonly<Pick<Props, "children"> & import("./types").WithSequencerProps>) => InjectedProps | Pick<InjectedProps, K> | null) | Pick<InjectedProps, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        readonly props: Readonly<Pick<Props, "children"> & import("./types").WithSequencerProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<InjectedProps>;
        refs: {
            [key: string]: React.ReactInstance;
        };
    };
    defaultProps: import("./types").WithSequencerProps;
    contextType?: React.Context<any> | undefined;
};
export default _default;
